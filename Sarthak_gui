import random
import re
import json
import tkinter as tk
from tkinter import messagebox, simpledialog

class Student:
    def __init__(self, first_name, last_name, email, password):
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.password = password
        self.id = self.generate_id()
        self.enrolled_subjects = []

    def generate_id(self):
        student_id = str(random.randint(1, 999999))
        return student_id.zfill(6)

    def is_valid_email(self, email):
        return bool(email.endswith("@university.com") and ("@" in email) and ("." in email))

    def is_valid_password(self, password):
        return bool(re.match(r"^[A-Z].{5,}[0-9]{3}$", password))

    def register(self, first_name, last_name, email, password):
        if self.is_valid_email(email) and self.is_valid_password(password):
            self.first_name = first_name
            self.last_name = last_name
            self.email = email
            self.password = password
            self.enrolled_subjects = []
            return True
        else:
            if not self.is_valid_email(email):
                messagebox.showerror("Error", "Email format incorrect. Please ensure it is in the following format: first.last@university.com")
            if not self.is_valid_password(password):
                messagebox.showerror("Error", "Password does not meet requirements. Please ensure it is 6 characters long, starts with a letter, and ends with three digits.")
            return False
        
class Subject:
  def __init__(self):
    self.id = str(random.randint(1, 999)).zfill(3)
    self.mark = random.randint(25, 100)
    self.grade = self.calculate_grade()

  def calculate_grade(self):
    if self.mark < 50:
      return "Z"
    elif self.mark < 65:
      return "P"
    elif self.mark < 75:
      return "C"
    elif self.mark < 85:
      return "D"
    else:
      return "HD"


class Database:
    def load_students(self):
        try:
            with open("students.data", "r") as file:
                data = json.load(file)
                students = []
                for d in data:
                    student = Student(d["first_name"], d["last_name"], d["email"], d["password"])
                    student.enrolled_subjects = []
                    for subject_data in d["enrolled_subjects"]:
                        subject = Subject()
                        subject.mark = subject_data["mark"]
                        subject.grade = subject_data["grade"]
                        student.enrolled_subjects.append(subject)
                    students.append(student)
            return students
        except FileNotFoundError:
            return []

    def register_student(self, first_name, last_name, email, password):
        new_student = Student(None, None, None, None)  # Create empty student object
        if new_student.register(first_name, last_name, email, password):
            return new_student
        else:
            return False

    def save_students(self, students):
        data = [{"id": s.id, "first_name": s.first_name, "last_name": s.last_name, "email": s.email, "password": s.password,
                 "enrolled_subjects": [{"subject_id": subj.id, "mark": subj.mark, "grade": subj.grade} for subj in s.enrolled_subjects]} for s in students]
        with open("students.data", "w") as file:
            json.dump(data, file)



class UniAppSystem:
    def __init__(self, root):
        self.root = root
        self.database = Database()
        self.students = self.database.load_students()
        self.logged_in_student = None
        self.main_menu()
    

    def student_login(self, email, password):
    # Iterate through each student's data in the file
        for student in self.students:
            # Check if the email and password match
            if student.email == email and student.password == password:
                return student  # Credentials match
        return None  # No match found
    

    def login_case(self):
        email = simpledialog.askstring("Login", "Enter email:")
        password = simpledialog.askstring("Login", "Enter password:", show='*')
        if email and password:
            student = self.student_login(email.lower(), password)
            if student:
                self.logged_in_student = student # Store the logged-in student
                self.student_course_menu()
                self.database.save_students(self.students)
            else:
                messagebox.showerror("Error", "Login unsuccessful, please try again.")
    


    def register_student_window(self):
        register_student_window = tk.Toplevel(self.root)
        register_student_window.title("Registration Page")


         # Create labels and entry fields for user input
        label_first_name = tk.Label(register_student_window, text="First Name:")
        label_first_name.grid(row=0, column=0, sticky="e")
        entry_first_name = tk.Entry(register_student_window)
        entry_first_name.grid(row=0, column=1)

        label_last_name = tk.Label(register_student_window, text="Last Name:")
        label_last_name.grid(row=1, column=0, sticky="e")
        entry_last_name = tk.Entry(register_student_window)
        entry_last_name.grid(row=1, column=1)

        label_email = tk.Label(register_student_window, text="Email:")
        label_email.grid(row=2, column=0, sticky="e")
        entry_email = tk.Entry(register_student_window)
        entry_email.grid(row=2, column=1)

        label_password = tk.Label(register_student_window, text="Password:")
        label_password.grid(row=3, column=0, sticky="e")
        entry_password = tk.Entry(register_student_window, show="*")
        entry_password.grid(row=3, column=1)

        
        def register_student():
        # Retrieve values from entry fields
            first_name = entry_first_name.get().capitalize()
            last_name = entry_last_name.get().capitalize()
            email = entry_email.get().lower()
            password = entry_password.get().strip()

            # Check if the student's email is already in the database before adding them in
            students_data = self.database.load_students()
            new_student_email = email
            email_exists = any(student.email == new_student_email for student in students_data)

            if not email_exists:
                # Register the student
                new_student = self.database.register_student(first_name, last_name, email, password)
                if new_student:
                    self.students.append(new_student)
                    self.database.save_students(self.students)
                    messagebox.showinfo("Success", "Registration successful! Please login to proceed.")
                    register_student_window.destroy()
                else:
                    messagebox.showerror("Error", "Registration unsuccessful. Please check your input.")
            else:
                messagebox.showerror("Error", "Student already exists.")

    # Button to trigger registration
        register_button = tk.Button(register_student_window, text="Register", command=register_student)
        register_button.grid(row=4, columnspan=2)


# questionable
    #def exit_menu(self):
    #    self.root.destroy()


    def main_menu(self):
        self.root.title("GUIUniApp - University Enrolment System")
        self.clear_window()  # clear the window
        tk.Label(self.root, text="Welcome to CLIUniApp", font=("Arial", 16)).pack(pady=20)
        tk.Button(self.root, text="Student System", command=self.student_menu).pack(pady=10)
        tk.Button(self.root, text="Admin System", command=self.admin_menu).pack(pady=10)
        tk.Button(self.root, text="Exit", command=self.root.quit).pack(pady=10)

    def student_menu(self):
        self.clear_window()  # clear the window
        tk.Label(self.root, text="Student Menu", font=("Arial", 16)).pack(pady=20)
        tk.Button(self.root, text="Login as student", command=self.login_case).pack()
        tk.Button(self.root, text="Register as student", command=self.register_student_window).pack()
        tk.Button(self.root, text="Exit", command=self.main_menu).pack()

    def clear_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        def exit_menu(self):
            self.root.deiconify()  # show the main menu window again
            self.student_menu.destroy()  # close the student menu window
    
    def enroll_subject(self, student):
        if self.logged_in_student and len(self.logged_in_student.enrolled_subjects) < 4:
            subject_enrolled = Subject()
            student.enrolled_subjects.append(subject_enrolled)  
            num_enrolled = len(student.enrolled_subjects)
            messagebox.showinfo("Enrolled successfully", f"Enrolled successfully into subject {subject_enrolled.id}. You are now enrolled in {num_enrolled} out of 4 subjects.")
        elif not self.logged_in_student:
            messagebox.showerror("Error", "No student logged in.")
        else:
            messagebox.showinfo("Maximum enrolment reached", "Maximum enrolment reached (4 subjects).")

    def remove_subject(self, student):
        if student.enrolled_subjects:
            subject_removed = student.enrolled_subjects.pop()
            messagebox.showinfo("Success", f"Subject {subject_removed.id} removed!")
            self.show_enrolment(student) # Update enrolment display after removal
        else:
            messagebox.showinfo("Info", "No subjects enrolled!")  # Show message if no subjects are enrolled


    def show_enrolment(self, student):
        if student.enrolled_subjects:
            message = "\nEnrolled Subjects:\n"
            #messagebox.showinfo("\nEnrolled Subjects:")
            for i, subject in enumerate(student.enrolled_subjects):
                message += f"{i}. Subject ID: {subject.id}, Mark: {subject.mark}, Grade: {subject.grade}\n"
            messagebox.showinfo("Enrolled Subjects", message)
        else:
            messagebox.showinfo("Info", "No subjects enrolled!")

            
    def change_password(self, student):
        while True:
            new_password = input("Enter new password: ")
            confirm_password = input("Confirm password: ")
            if new_password != confirm_password:
                messagebox.showinfo("Passwords do not match, please try again.")
                continue
            else:
                break
        if student.is_valid_password(new_password):
            student.password = new_password
            messagebox.showinfo("Password changed successfully!")
        else:
            messagebox.showinfo("Invalid password format! Please try again.")
            messagebox.showinfo("Note: Password must have at least 6 characters total, beginning with an uppercase, and last three characters must be digits.")

    #def logout(self):
     #   self.root.deiconify()

    def student_course_menu(self):
        student_course_menu_window = tk.Toplevel(self.root)
        student_course_menu_window.title("Student Menu")

        tk.Label(student_course_menu_window, text="Student Course Menu").pack()
        tk.Button(student_course_menu_window, text="Enrol into a subject", command=lambda: self.enroll_subject(self.logged_in_student)).pack()
        tk.Button(student_course_menu_window, text="Remove a subject from enrolment", command=lambda: self.remove_subject(self.logged_in_student)).pack()
        tk.Button(student_course_menu_window, text="Show current enrolment", command=lambda: self.show_enrolment(self.logged_in_student)).pack()
        tk.Button(student_course_menu_window, text="Change password", command=lambda: self.change_password(self.logged_in_student)).pack()
        tk.Button(student_course_menu_window, text="Logout", command=self.main_menu).pack()


    def show_all_students(self):
        all_students_window = tk.Toplevel(self.root)
        all_students_window.title("All Students")

        tk.Label(all_students_window, text="All Students", font=("Arial", 16)).pack(pady=10)

        for student in self.students:
            student_info = f"ID: {student.id}, Name: {student.first_name} {student.last_name}, Email: {student.email}"
            tk.Label(all_students_window, text=student_info).pack(pady=5)

    def group_students_by_grade(self):
        group_by_grade_window = tk.Toplevel(self.root)
        group_by_grade_window.title("Group Students by Grade")

        
        subjects_by_grade = []

        subjects_by_grade = {"HD": [], "D": [], "C": [], "P": [], "Z": []}

        # Group subjects by grade
        for student in self.students:
            for subject in student.enrolled_subjects:
                grade = subject.grade
                subjects_by_grade[grade].append((student, subject))

        # Display subjects grouped by grade
        for grade, subjects in subjects_by_grade.items():
            if subjects:
                tk.Label(group_by_grade_window, text=f"Subjects with grade {grade}:", font=("Arial", 12, "bold")).pack(pady=5)
                for student, subject in subjects:
                    student_info = f"Student: {student.first_name} {student.last_name}, Email: {student.email}, Subject: {subject.id}, Subject Mark: {subject.mark}"
                    tk.Label(group_by_grade_window, text=student_info).pack(pady=2)

    def partition_students(self):
        partition_window = tk.Toplevel(self.root)
        partition_window.title("Partition Students by PASS/FAIL Category")

        passed_students = []
        failed_students = []

        for student in self.students:
            total_marks = sum(subject.mark for subject in student.enrolled_subjects)
            average_score = total_marks / len(student.enrolled_subjects) if student.enrolled_subjects else 0

            if average_score >= 50:
                passed_students.append(student)
            else:
                failed_students.append(student)

        tk.Label(partition_window, text="Passed Students:", font=("Arial", 12, "bold")).pack(pady=5)
        for student in passed_students:
            total_marks = sum(subject.mark for subject in student.enrolled_subjects)
            average_score = total_marks / len(student.enrolled_subjects) if student.enrolled_subjects else 0
            student_info = f"ID: {student.id} {student.first_name} {student.last_name}, GPA: {average_score}"
            tk.Label(partition_window, text=student_info).pack(pady=2)

        tk.Label(partition_window, text="Failed Students:", font=("Arial", 12, "bold")).pack(pady=5)
        for student in failed_students:
            total_marks = sum(subject.mark for subject in student.enrolled_subjects)
            average_score = total_marks / len(student.enrolled_subjects) if student.enrolled_subjects else 0
            student_info = f"ID: {student.id} {student.first_name} {student.last_name}, GPA: {average_score}"
            tk.Label(partition_window, text=student_info).pack(pady=2)

    def remove_student(self):
        remove_student_window = tk.Toplevel(self.root)
        remove_student_window.title("Remove Student")

        tk.Label(remove_student_window, text="Enter student email to remove:", font=("Arial", 12)).pack(pady=5)
        email_entry = tk.Entry(remove_student_window)
        email_entry.pack(pady=5)

        def remove():
            email = email_entry.get().strip()
            found = False
            for i, student in enumerate(self.students):
                if student.email == email:
                    self.students.pop(i)
                    found = True
                    messagebox.showinfo("Success", "Student removed!")
                    break
            if not found:
                messagebox.showinfo("Error", "Student not found!")

        tk.Button(remove_student_window, text="Remove", command=remove).pack(pady=5)



    def clear_students_window(self):

        clear_students_window = tk.Toplevel(self.root)
        clear_students_window.title("Clear Students Data File")

        confirmation = messagebox.askyesno("Confirmation", "Are you sure you want to clear all student data?")
        if confirmation:
            try:
                with open("students.data", "w") as file:
                    json.dump([], file)
                messagebox.showinfo("Success", "All student data cleared!")
            except FileNotFoundError:
                messagebox.showerror("Error", "Unable to clear student data.")
            except Exception as e:
                messagebox.showerror("Error", f"An error occurred: {e}")


    def admin_menu(self):

        admin_menu_window = tk.Toplevel(self.root)
        admin_menu_window.title("Admin Menu")
        
        tk.Button(admin_menu_window, text="Show all students", command=self.show_all_students).pack(pady=5)
        tk.Button(admin_menu_window, text="Group students by grade", command=self.group_students_by_grade).pack(pady=5)
        tk.Button(admin_menu_window, text="Partition students by PASS/FAIL category", command=self.partition_students).pack(pady=5)
        tk.Button(admin_menu_window, text="Remove a student", command=self.remove_student).pack(pady=5)
        tk.Button(admin_menu_window, text="Clear all student data", command=self.clear_students_window).pack(pady=5)
        tk.Button(admin_menu_window, text="Exit", command=admin_menu_window.destroy).pack(pady=5)

       

root = tk.Tk()
app = UniAppSystem(root)
root.mainloop()